import 'package:flutter/material.dart';

void main() => runApp(TaskTallyApp());

class TaskTallyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'TaskTally',
      theme: ThemeData(
        primarySwatch: Colors.indigo,
        scaffoldBackgroundColor: Color(0xFFF1F3F6),
        fontFamily: 'Roboto',
      ),
      home: TaskListScreen(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class Task {
  final String title;
  final String description;
  final DateTime dueDate;
  final String status;
  final String priority;

  Task({
    required this.title,
    required this.description,
    required this.dueDate,
    required this.status,
    required this.priority,
  });
}

class TaskListScreen extends StatelessWidget {
  final List<Task> tasks = [
    Task(
      title: 'Design UI',
      description: 'Finalize layout and color scheme',
      dueDate: DateTime.now().add(Duration(days: 2)),
      status: 'In Progress',
      priority: 'High',
    ),
    Task(
      title: 'Client Feedback',
      description: 'Review feedback from the client',
      dueDate: DateTime.now().add(Duration(days: 1)),
      status: 'Pending',
      priority: 'Medium',
    ),
    Task(
      title: 'Project Deployment',
      description: 'Deploy the app to server',
      dueDate: DateTime.now().add(Duration(days: 4)),
      status: 'Completed',
      priority: 'Low',
    ),
  ];

  Color getPriorityColor(String priority) {
    switch (priority) {
      case 'High':
        return Colors.pinkAccent;
      case 'Medium':
        return Colors.orangeAccent;
      case 'Low':
        return Colors.lightGreen;
      default:
        return Colors.grey;
    }
  }

  IconData getStatusIcon(String status) {
    switch (status) {
      case 'Completed':
        return Icons.check_circle;
      case 'In Progress':
        return Icons.autorenew;
      case 'Pending':
        return Icons.pending_actions;
      default:
        return Icons.info;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('TaskTally ðŸ§ '),
        backgroundColor: Colors.deepPurple,
        elevation: 4,
      ),
      body: ListView.builder(
        padding: EdgeInsets.all(12),
        itemCount: tasks.length,
        itemBuilder: (context, index) {
          final task = tasks[index];
          return Container(
            margin: EdgeInsets.only(bottom: 14),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [
                  getPriorityColor(task.priority).withOpacity(0.9),
                  getPriorityColor(task.priority).withOpacity(0.5),
                ],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
              borderRadius: BorderRadius.circular(16),
              boxShadow: [
                BoxShadow(
                  color: Colors.black26,
                  blurRadius: 6,
                  offset: Offset(2, 4),
                )
              ],
            ),
            child: ListTile(
              contentPadding: EdgeInsets.all(16),
              leading: Icon(
                getStatusIcon(task.status),
                size: 32,
                color: Colors.white,
              ),
              title: Text(
                task.title,
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: 18,
                  color: Colors.white,
                ),
              ),
              subtitle: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  SizedBox(height: 6),
                  Text(
                    task.description,
                    style: TextStyle(color: Colors.white70),
                  ),
                  SizedBox(height: 8),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        'Due: ${task.dueDate.toLocal().toString().split(' ')[0]}',
                        style: TextStyle(color: Colors.white),
                      ),
                      Text(
                        'Priority: ${task.priority}',
                        style: TextStyle(color: Colors.white),
                      ),
                    ],
                  ),
                ],
              ),
              onTap: () {
                // TODO: Add navigation to detail or edit screen
              },
            ),
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          // TODO: Add task creation
        },
        child: Icon(Icons.add),
        backgroundColor: Colors.deepPurple,
        tooltip: 'Add Task',
      ),
    );
  }
}
